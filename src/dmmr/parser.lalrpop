use std::str::FromStr;
use crate::*;
use crate::dmmr::*;
use crate::dmmr::lexer::*;
use crate::dmmr::lexer::Token;

grammar;

// ============================================================ extern

extern {
    type Error = ();
    type Location = usize;

    enum Token {
        Comment => Token::Comment(<String>),
        
        PrototypeDefStart => Token::PrototypeDefStart(<String>),
        AtomPath => Token::AtomPath(<String>),
        
        VarInt => Token::VarInt(<(String, f64)>),
        VarNull => Token::VarNull(<(String, ())>),
        VarString => Token::VarString(<(String, String)>),
        VarIcon => Token::VarIcon(<(String, String)>),
        VarPath => Token::VarPath(<(String, String)>),
        VarList => Token::VarList(<(String, Vec<i32>)>),
        VarListString => Token::VarListString(<(String, Vec<String>)>),
        VarListStringAssoc => Token::VarListStringAssoc(<(String, Vec<(String, String)>)>),
        VarListPath => Token::VarListPath(<(String, Vec<String>)>),
        VarEnd => Token::VarEnd,
        
        RowDefStart => Token::RowDefStart(<Vec<i32>>),
        PrototypeId => Token::PrototypeId(<String>),
        RowDefEnd => Token::RowDefEnd,
        
        EmptyLine => Token::EmptyLine,
    
        Err => Token::Err,
    }
}

// ============================================================ grammar

Var: (String, VarVal) = {
    <v:VarInt>          => ( v.0, VarVal::Int(v.1), ),
    <v:VarString>       => ( v.0, VarVal::String(v.1), ),
    <v:VarIcon>         => ( v.0, VarVal::Icon(v.1), ),
    <v:VarPath>         => ( v.0, VarVal::Path(v.1), ),
    <v:VarList>         => ( v.0, VarVal::List(v.1), ),
    <v:VarListString>       => ( v.0, VarVal::ListString(v.1), ),
    <v:VarListStringAssoc>  => ( v.0, VarVal::ListStringAssoc(v.1), ),
    <v:VarListPath>       => ( v.0, VarVal::ListPath(v.1), ),
    <v:VarNull>             => ( v.0, VarVal::Null, ),
}

Atom: Atom = {
    <p:AtomPath>
        => Atom { path: p, vars: LinkedHashMap::new(), },
    <p:AtomPath> <v:Var+> VarEnd
        => Atom { path: p, vars: v.iter().map(|(a, b)| (a.clone(), (*b).clone())).collect(), },
}

Prototype: Prototype = {
    <i:PrototypeDefStart> <a:Atom+>
        => Prototype { id: i, atoms: a, },
}

Row: Row = {
    <i:RowDefStart> <t:PrototypeId+> RowDefEnd
        => Row { coords: i, tiles: t, },
}

pub Dmm: Dmm = {
    <c:Comment> <p:Prototype+> EmptyLine <r:Row+>
        => Dmm { comment: c, prototypes: p, rows: r},
}
